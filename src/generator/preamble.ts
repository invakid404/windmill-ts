import dedent from "dedent";
import { getContext } from "./context.js";

const preamble = dedent`
  // This file is auto-generated by windmill-ts, do not modify it manually
  import { z } from 'zod';
  import * as wmill from 'windmill-client';
  ${
    /* NOTE: Windmill has JSX enabled, so <T> is illegal.
             The usual way to fix this is <T,>, but some formatters/editors
             remove it, hence why a random constraint is used instead. */ ""
  }
  const lazyObject = <T extends unknown>(fn: () => T) => {
    let instance: T | null = null;
    return new Proxy({}, {
      get(_target, prop) {
        if (instance == null) {
          instance = fn();
        }

        let value = (instance as any)[prop];
        if (value instanceof Function) {
          value = value.bind(instance);
        }

        return value;
      }
    }) as T;
  }

  export const runDetached = async <T extends unknown>(cb: () => Promise<T>) => {
    const originalRootFlowJobId = process.env["WM_ROOT_FLOW_JOB_ID"];
    delete (process.env as Record<string, string | undefined>)[
      "WM_ROOT_FLOW_JOB_ID"
    ];

    const result = await cb();

    process.env["WM_ROOT_FLOW_JOB_ID"] = originalRootFlowJobId!;

    return result;
  };
`;

export const writePreamble = async () => {
  const { write } = getContext()!;

  await write(preamble);
};
