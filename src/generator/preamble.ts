import dedent from "dedent";
import { getContext } from "./context.js";

export const envStorageName = "envStorage";

const preamble = dedent`
  // This file is auto-generated by windmill-ts, do not modify it manually
  import { z } from 'zod';
  import * as wmill from 'windmill-client';
  import { AsyncLocalStorage } from 'node:async_hooks';
  ${
    /* NOTE: Windmill has JSX enabled, so <T> is illegal.
             The usual way to fix this is <T,>, but some formatters/editors
             remove it, hence why a random constraint is used instead. */ ""
  }
  const lazyObject = <T extends unknown>(fn: () => T) => {
    let instance: T | null = null;
    return new Proxy({}, {
      get(_target, prop) {
        if (instance == null) {
          instance = fn();
        }

        let value = (instance as any)[prop];
        if (value instanceof Function) {
          value = value.bind(instance);
        }

        return value;
      }
    }) as T;
  }

  const ${envStorageName} = new AsyncLocalStorage<Record<string, string | undefined>>();

  const originalProcessEnv = process.env;  
  process.env = new Proxy(originalProcessEnv, {
    get: (target, prop, receiver) => {
      const store = ${envStorageName}.getStore();
      if (store != null && prop in store && typeof prop === 'string') {
        return store[prop];
      }
    
      return Reflect.get(target, prop, receiver);
    },
    set: (target, prop, value, receiver) => {
      return Reflect.set(target, prop, value, receiver);
    }
  })

  export const runDetached = async <T extends unknown>(cb: () => Promise<T>) => {
    return ${envStorageName}.run(
      { WM_JOB_ID: undefined, WM_ROOT_FLOW_JOB_ID: undefined },
      () => cb(),
    );
  };
`;

export const writePreamble = async () => {
  const { write } = getContext()!;

  await write(preamble);
};
